// src/context/CartProvider.jsx
import React, { useEffect, useState } from "react";
import api from "../api/axios"; // optional
import { useAuth } from "./useAuth";
import { CartContext } from "./CartContext";

// export const CartContext = createContext(); // This line is removed as per the patch intent

const CART_STORAGE_KEY = "habico_cart";

export const CartProvider = ({ children }) => {
  const { user } = useAuth();
  const [cartItems, setCartItems] = useState([]);

  useEffect(() => {
    try {
      const raw = localStorage.getItem(CART_STORAGE_KEY);
      if (raw) setCartItems(JSON.parse(raw));
    } catch (e) {
      console.warn("Failed to load cart from storage", e);
    }
  }, []);

  useEffect(() => {
    try {
      localStorage.setItem(CART_STORAGE_KEY, JSON.stringify(cartItems));
    } catch (e) {
      console.warn("Failed to save cart to storage", e);
    }
  }, [cartItems]);

  const addToCart = (product) => {
    if (!product || !product.id) return;
    const qty = Number(product.quantity) || 1;
    setCartItems((prev) => {
      const existing = prev.find((p) => p.id === product.id);
      if (existing) {
        return prev.map((p) =>
          p.id === product.id
            ? { ...p, quantity: Math.max(1, p.quantity + qty) }
            : p
        );
      }
      const item = {
        id: product.id,
        name: product.name,
        price: Number(product.price) || 0,
        image: product.image || product.img || null,
        model: product.model || "",
        quantity: Math.max(1, qty),
        ...product,
      };
      return [...prev, item];
    });
  };

  const removeFromCart = (id) => setCartItems((prev) => prev.filter((p) => p.id !== id));

  const updateQuantity = (id, quantity) => {
    const q = Number(quantity) || 0;
    if (q <= 0) {
      removeFromCart(id);
      return;
    }
    setCartItems((prev) => prev.map((p) => (p.id === id ? { ...p, quantity: q } : p)));
  };

  const clearCart = () => setCartItems([]);

  const placeOrder = async () => {
    if (!user) return { ok: false, message: "Please login to place an order." };
    if (!cartItems.length) return { ok: false, message: "Your cart is empty." };
    try {
      if (api && typeof api.post === "function") {
        const payload = {
          items: cartItems.map((it) => ({ product_id: it.id, quantity: it.quantity })),
          total: cartItems.reduce((s, it) => s + it.price * it.quantity, 0),
        };
        await api.post("/orders", payload);
        clearCart();
        return { ok: true, message: "Order submitted successfully." };
      }
    } catch (e) {
      console.warn("Order API failed:", e?.response || e?.message || e);
      return { ok: false, message: e.response?.data?.message || "Failed to place order." };
    }
    clearCart();
    return { ok: true, message: "Order placed (simulated)." };
  };

  return (
    <CartContext.Provider value={{ cartItems, addToCart, removeFromCart, updateQuantity, clearCart, placeOrder }}>
      {children}
    </CartContext.Provider>
  );
};

export default CartProvider;
